package messenger

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"
)

const (
	FacebookSendAPIURLTemplate = "%s?access_token=%s"
	DefaultFacebookSendAPIEndpoint = "https://graph.facebook.com/v2.6/me/messages"
	MessageTypeResponse = "RESPONSE"
	MessageTypeUpdate = "UPDATE"
	MessageTypeMessageTag = "MESSAGE_TAG"
	MessageTypeNonPromotionalSubscription = "NON_PROMOTIONAL_SUBSCRIPTION"
)

type MessengerClient struct {
	// Access token generated by Facebook for the page
	// Keep it secret!
	PageAccessToken string
	Endpoint        string
}

type SendMessageWrapper struct {
	// (soon to be) required
	MessagingType string         `json:"messaging_type"`
	Recipient     *SendRecipient `json:"recipient"`
	Message       *Message       `json:"message"`
	// Cannot be sent with a message, must be a separate request
	SenderAction string `json:"sender_action"`
	// Optional
	NotificationType string `json:"notification_type"`
	// Optional
	Tag string `json:"tag"`
}

type SendRecipient struct {
	ID string `json:"id"`
}

type Message struct {
	Text       string          `json:"text"`
	Attachment *SendAttachment `json:"attachment"`
}

type SendAttachment struct {
	Type    string                 `json:"type"`
	Payload *SendAttachmentPayload `json:"payload"`
}

type SendAttachmentPayload struct {
	// TODO
}

type MessageSendResponseFromFacebook struct {
	RecipientID string                            `json:"recipient_id"`
	MessageID   string                            `json:"message_id"`
	Error       *FacebookMessageSendErrorResponse `json:"error"`
}

type FacebookMessageSendErrorResponse struct {
	Message      string `json:"message"`
	Type         string `json:"type"`
	Code         int    `json:"code"`
	ErrorSubcode int    `json:"error_subcode"`
	TraceID      string `json:"fbtrace_id"`
}

// NewMessengerClient creates a client and defaults to the current API endpoint
func NewMessengerClient(token string) (*MessengerClient) {
	c := new(MessengerClient)
	c.PageAccessToken = token
	c.Endpoint = DefaultFacebookSendAPIEndpoint
	return c
}

// QuickSendTextMessage sends a simple text message to a user with type "response"
func (c *MessengerClient) QuickTextMessage(text, recipientID string) (*MessageSendResponseFromFacebook, error) {
	smw := &SendMessageWrapper{
		MessagingType: MessageTypeResponse,
		Recipient: &SendRecipient{ID: recipientID},
		Message: &Message{Text: text},
	}

	return c.doPost(smw)
}

// doPost provides a wrapper for elements that are common across all message posts to Facebook
// Returns an error only if the request could not be sent at all
// In the case of errors from Facebook, e.g. bad request, the error will be contained in the response struct
func (c *MessengerClient) doPost(messageToSend *SendMessageWrapper) (*MessageSendResponseFromFacebook, error) {
	fbResp := &MessageSendResponseFromFacebook{}
	requestBody, err := json.Marshal(messageToSend)
	if err != nil {
		return fbResp, fmt.Errorf("error marshalling message json: %s", err)
	}

	fullEndpoint := fmt.Sprintf(FacebookSendAPIURLTemplate, c.Endpoint, c.PageAccessToken)
	resp, err := http.Post(fullEndpoint, "application/json", bytes.NewReader(requestBody))
	if err != nil {
		return fbResp, fmt.Errorf("error on http request: %s", err)
	}

	err = json.NewDecoder(resp.Body).Decode(fbResp)
	if err != nil {
		return fbResp, fmt.Errorf("unknown API response from Facebook on http status code %d", resp.StatusCode)
	}

	if resp.StatusCode == http.StatusOK {
		fbResp.Error = nil
	}

	return fbResp, nil
}
